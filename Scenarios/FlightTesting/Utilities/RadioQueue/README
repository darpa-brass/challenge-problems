************************************************************
********** README File For Radio Queue Vizualizer **********
************************************************************

Run with Python 3.

    > python3 RadioQueue.py
    
    
Command Line Arguments are available via the '-h' argument:
    > python3 RadioQueue.py -h
    usage: RadioQueue.py [-h] [-I] [-M MAX_QUEUE_SIZE] [-E EPOCH_SIZE_MS] [-r]
                         [-d DEBUG] [-v]

    optional arguments:
      -h, --help         show this help message and exit
      -I                 Infinite Queue Size (not limited by the MAX_QUEUE_SIZE).
                         WARNING: This can utilize a lot of system resources. Use
                         at your own risk!
      -M MAX_QUEUE_SIZE  Set MAX queue size in Bytes [default: 4194240]
      -E EPOCH_SIZE_MS   Set the Epoch size (milliseconds) [default: 100]
      -r                 Realtime mode (screen updates 1x per epoch. Default: Slow
                         Refresh rate (1x per sec)
      -d DEBUG           Set the Debug level
      -v, --version      show program's version number and exit
      --database         Sets the name of the OrientDB database
      --config           Set config file for OrientDB
      
      
All arguments are optional.
The queue size of all radios can be set via the '-M <val>' option.  The
    default size is 4.194240 MB.
The program will limit the queue depths of a radio to the MAX_QUEUE_SIZE unless
    the '-I' option is used for "infinite" queue size.
The epoch size can be set via the '-E <val>' option.  Because the queues are 
    updated every epoch, setting this value will affect how quickly updates are
    seen.  The default epoch size is 100ms.
The '-r' option will start the application with a refresh rate to 1x per second.
    The refresh rate can be toggled during runtime via the 'r' (realtime) or
    's' (slow refresh) keys.  Some computers cannot handle the realtime refresh
    rate, so the default mode is to use the 1x per second rate.

    
KNOWN ISSUES:
On Windows, you need to run a 'pip install windows-curses' for the Python 
interpreter that will be running the script.  The curses library doesn't work 
by default on Windows.

When running on Windows, the application does not display well if the terminal
is resized during execution.  The best approach is to make the window large
enough when starting the application.

Errors will be thrown if the window does not meet the minimum size.


INPUT FILES:
The program updates its simulated radio queues by reading two JSON files each
epoch and updating each queue accordingly.  The two input files are assumed to
be in the same directory as the calling terminal (just put them together with
the python program and run the program from that directory).  The two files are
detailed below:

    data_input_rates.json - includes data rate coming into the radio that needs
                            to be transmitted
        [
            {"RadioName": "NAME1", "DataInRate-bps": 200000, "Burstiness": 0.0, "ValuePerKbTx": 2.0},
            {"RadioName": "NAME2", "DataInRate-bps": 100000, "Burstiness": 1.0, "ValuePerKbTx": 5.0}
        ]
    
    bw_allocs.json - includes allocated bandwidth for transmitting data
        [
            {"RadioName": "NAME1", "AllocatedBw-bps": 150000}, 
            {"RadioName": "NAME2", "AllocatedBw-bps": 120000}
        ]

The data_input_rates.json file can be manually tuned to adjust the current data
rate requirements on a radio during the test.

The bw_allocs.json file is expected to be written by Link Manager applications
(e.g. those applications performing dynamic bandwidth allocation scheduling). 


OUTPUT FILE:
The program writes a JSON file that contains the current queue status for each
of its radios.  This file is written to the local directory where the program 
is run.  The file is detailed below:

    radio_queues.json - includes the current queue depth in bytes of each radio
        [
            {"RadioName": "NAME1", "QLen": 6250, "CurrentEpochValue": 300.0, "IsOnline": 1},
            {"RadioName": "NAME2", "QLen": 0, "CurrentEpochValue": 500.0, "IsOnline": 1}
        ]
        
Link Manager applications shall read this JSON file in order to see the current
queue depths of the radios it is scheduling.  Making schedule changes through
the bw_allocs.json file can affect the queue depths reported in the 
radio_queues.json file, depending on the delta between the allocated bandwidth
for a radio (from the bw_allocs.json file) and the corresponding radio's data
input rate (from the data_input_rates.json file).  The "IsOnline" key has a value
of '1' for "true/online" and '2' for "false/offline".

ORIENTDB INTEGRATION:
The program can also operate using an OrientDB database to store the input files
and output data. This is triggered by using the --database and --config options.
The database used should be configured with a node of Class "Radio_Usage".
This class should have the properties "Input_Rate" and "BW_Allocs" populated with
the initial conditions. Input_Rate should contain the contents of  the data_input_rates.json
and BW_Allocs has the contents of the bw_allocs.json file. The outputs from the
simulation are stored in the property "Radio_Queues" and are the same contents
as radio_queues.json.